// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v5.28.3
// source: tunnel.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EdgeMessage - messages sent FROM edge TO relay
type EdgeMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*EdgeMessage_Register
	//	*EdgeMessage_Data
	//	*EdgeMessage_Keepalive
	//	*EdgeMessage_Status
	Message       isEdgeMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EdgeMessage) Reset() {
	*x = EdgeMessage{}
	mi := &file_tunnel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EdgeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeMessage) ProtoMessage() {}

func (x *EdgeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeMessage.ProtoReflect.Descriptor instead.
func (*EdgeMessage) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *EdgeMessage) GetMessage() isEdgeMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *EdgeMessage) GetRegister() *RegisterRequest {
	if x != nil {
		if x, ok := x.Message.(*EdgeMessage_Register); ok {
			return x.Register
		}
	}
	return nil
}

func (x *EdgeMessage) GetData() *DataResponse {
	if x != nil {
		if x, ok := x.Message.(*EdgeMessage_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *EdgeMessage) GetKeepalive() *KeepAlive {
	if x != nil {
		if x, ok := x.Message.(*EdgeMessage_Keepalive); ok {
			return x.Keepalive
		}
	}
	return nil
}

func (x *EdgeMessage) GetStatus() *StatusUpdate {
	if x != nil {
		if x, ok := x.Message.(*EdgeMessage_Status); ok {
			return x.Status
		}
	}
	return nil
}

type isEdgeMessage_Message interface {
	isEdgeMessage_Message()
}

type EdgeMessage_Register struct {
	Register *RegisterRequest `protobuf:"bytes,1,opt,name=register,proto3,oneof"`
}

type EdgeMessage_Data struct {
	Data *DataResponse `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type EdgeMessage_Keepalive struct {
	Keepalive *KeepAlive `protobuf:"bytes,3,opt,name=keepalive,proto3,oneof"`
}

type EdgeMessage_Status struct {
	Status *StatusUpdate `protobuf:"bytes,4,opt,name=status,proto3,oneof"`
}

func (*EdgeMessage_Register) isEdgeMessage_Message() {}

func (*EdgeMessage_Data) isEdgeMessage_Message() {}

func (*EdgeMessage_Keepalive) isEdgeMessage_Message() {}

func (*EdgeMessage_Status) isEdgeMessage_Message() {}

// RelayMessage - messages sent FROM relay TO edge
type RelayMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*RelayMessage_RegisterAck
	//	*RelayMessage_Command
	//	*RelayMessage_Keepalive
	Message       isRelayMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelayMessage) Reset() {
	*x = RelayMessage{}
	mi := &file_tunnel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelayMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayMessage) ProtoMessage() {}

func (x *RelayMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayMessage.ProtoReflect.Descriptor instead.
func (*RelayMessage) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *RelayMessage) GetMessage() isRelayMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *RelayMessage) GetRegisterAck() *RegisterResponse {
	if x != nil {
		if x, ok := x.Message.(*RelayMessage_RegisterAck); ok {
			return x.RegisterAck
		}
	}
	return nil
}

func (x *RelayMessage) GetCommand() *FetchCommand {
	if x != nil {
		if x, ok := x.Message.(*RelayMessage_Command); ok {
			return x.Command
		}
	}
	return nil
}

func (x *RelayMessage) GetKeepalive() *KeepAlive {
	if x != nil {
		if x, ok := x.Message.(*RelayMessage_Keepalive); ok {
			return x.Keepalive
		}
	}
	return nil
}

type isRelayMessage_Message interface {
	isRelayMessage_Message()
}

type RelayMessage_RegisterAck struct {
	RegisterAck *RegisterResponse `protobuf:"bytes,1,opt,name=register_ack,json=registerAck,proto3,oneof"`
}

type RelayMessage_Command struct {
	Command *FetchCommand `protobuf:"bytes,2,opt,name=command,proto3,oneof"`
}

type RelayMessage_Keepalive struct {
	Keepalive *KeepAlive `protobuf:"bytes,3,opt,name=keepalive,proto3,oneof"`
}

func (*RelayMessage_RegisterAck) isRelayMessage_Message() {}

func (*RelayMessage_Command) isRelayMessage_Message() {}

func (*RelayMessage_Keepalive) isRelayMessage_Message() {}

// RegisterRequest - edge registers with relay on connection
type RegisterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HospitalId    string                 `protobuf:"bytes,1,opt,name=hospital_id,json=hospitalId,proto3" json:"hospital_id,omitempty"`         // e.g., "DEMO_SAMSUN"
	EdgeServerId  string                 `protobuf:"bytes,2,opt,name=edge_server_id,json=edgeServerId,proto3" json:"edge_server_id,omitempty"` // e.g., "SAMSUN-001"
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                                 // e.g., "0.5.0"
	Token         string                 `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`                                     // Authentication token
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_tunnel_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterRequest) GetHospitalId() string {
	if x != nil {
		return x.HospitalId
	}
	return ""
}

func (x *RegisterRequest) GetEdgeServerId() string {
	if x != nil {
		return x.EdgeServerId
	}
	return ""
}

func (x *RegisterRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RegisterRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// RegisterResponse - relay acknowledges registration
type RegisterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                          // Error message if !success
	ServerTime    int64                  `protobuf:"varint,3,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"` // Unix timestamp for clock sync
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_tunnel_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RegisterResponse) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

// FetchCommand - relay requests DICOM instance(s)
type FetchCommand struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	RequestId string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // UUID for this request
	Type      string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                            // "instance", "series", "study"
	// UIDs based on type
	InstanceUid string `protobuf:"bytes,3,opt,name=instance_uid,json=instanceUid,proto3" json:"instance_uid,omitempty"`
	SeriesUid   string `protobuf:"bytes,4,opt,name=series_uid,json=seriesUid,proto3" json:"series_uid,omitempty"`
	StudyUid    string `protobuf:"bytes,5,opt,name=study_uid,json=studyUid,proto3" json:"study_uid,omitempty"`
	// Resume support
	ResumeFrom    string `protobuf:"bytes,6,opt,name=resume_from,json=resumeFrom,proto3" json:"resume_from,omitempty"` // Instance UID to resume from (optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchCommand) Reset() {
	*x = FetchCommand{}
	mi := &file_tunnel_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCommand) ProtoMessage() {}

func (x *FetchCommand) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCommand.ProtoReflect.Descriptor instead.
func (*FetchCommand) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{4}
}

func (x *FetchCommand) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *FetchCommand) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FetchCommand) GetInstanceUid() string {
	if x != nil {
		return x.InstanceUid
	}
	return ""
}

func (x *FetchCommand) GetSeriesUid() string {
	if x != nil {
		return x.SeriesUid
	}
	return ""
}

func (x *FetchCommand) GetStudyUid() string {
	if x != nil {
		return x.StudyUid
	}
	return ""
}

func (x *FetchCommand) GetResumeFrom() string {
	if x != nil {
		return x.ResumeFrom
	}
	return ""
}

// DataResponse - edge sends DICOM data
type DataResponse struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	RequestId string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // Matches FetchCommand.request_id
	// Types that are valid to be assigned to Payload:
	//
	//	*DataResponse_Start
	//	*DataResponse_Chunk
	//	*DataResponse_Complete
	//	*DataResponse_Error
	Payload       isDataResponse_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataResponse) Reset() {
	*x = DataResponse{}
	mi := &file_tunnel_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataResponse) ProtoMessage() {}

func (x *DataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataResponse.ProtoReflect.Descriptor instead.
func (*DataResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{5}
}

func (x *DataResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DataResponse) GetPayload() isDataResponse_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DataResponse) GetStart() *DataStart {
	if x != nil {
		if x, ok := x.Payload.(*DataResponse_Start); ok {
			return x.Start
		}
	}
	return nil
}

func (x *DataResponse) GetChunk() *DataChunk {
	if x != nil {
		if x, ok := x.Payload.(*DataResponse_Chunk); ok {
			return x.Chunk
		}
	}
	return nil
}

func (x *DataResponse) GetComplete() *DataComplete {
	if x != nil {
		if x, ok := x.Payload.(*DataResponse_Complete); ok {
			return x.Complete
		}
	}
	return nil
}

func (x *DataResponse) GetError() *DataError {
	if x != nil {
		if x, ok := x.Payload.(*DataResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isDataResponse_Payload interface {
	isDataResponse_Payload()
}

type DataResponse_Start struct {
	Start *DataStart `protobuf:"bytes,2,opt,name=start,proto3,oneof"` // First message: metadata
}

type DataResponse_Chunk struct {
	Chunk *DataChunk `protobuf:"bytes,3,opt,name=chunk,proto3,oneof"` // Data chunk (whole file OR part)
}

type DataResponse_Complete struct {
	Complete *DataComplete `protobuf:"bytes,4,opt,name=complete,proto3,oneof"` // Last message: summary
}

type DataResponse_Error struct {
	Error *DataError `protobuf:"bytes,5,opt,name=error,proto3,oneof"` // Error occurred
}

func (*DataResponse_Start) isDataResponse_Payload() {}

func (*DataResponse_Chunk) isDataResponse_Payload() {}

func (*DataResponse_Complete) isDataResponse_Payload() {}

func (*DataResponse_Error) isDataResponse_Payload() {}

// DataStart - metadata before sending data
type DataStart struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceUid   string                 `protobuf:"bytes,1,opt,name=instance_uid,json=instanceUid,proto3" json:"instance_uid,omitempty"`
	FileSize      int64                  `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`       // Total file size in bytes
	Chunked       bool                   `protobuf:"varint,3,opt,name=chunked,proto3" json:"chunked,omitempty"`                         // true if file will be sent in chunks
	ChunkCount    int32                  `protobuf:"varint,4,opt,name=chunk_count,json=chunkCount,proto3" json:"chunk_count,omitempty"` // Number of chunks (if chunked)
	Sequence      int32                  `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`                       // Sequence in multi-instance response (0-based)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataStart) Reset() {
	*x = DataStart{}
	mi := &file_tunnel_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataStart) ProtoMessage() {}

func (x *DataStart) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataStart.ProtoReflect.Descriptor instead.
func (*DataStart) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{6}
}

func (x *DataStart) GetInstanceUid() string {
	if x != nil {
		return x.InstanceUid
	}
	return ""
}

func (x *DataStart) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *DataStart) GetChunked() bool {
	if x != nil {
		return x.Chunked
	}
	return false
}

func (x *DataStart) GetChunkCount() int32 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

func (x *DataStart) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// DataChunk - file data (whole or partial)
type DataChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceUid   string                 `protobuf:"bytes,1,opt,name=instance_uid,json=instanceUid,proto3" json:"instance_uid,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                                     // DICOM file bytes (full file OR chunk)
	ChunkIndex    int32                  `protobuf:"varint,3,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`      // Chunk number (0-based, 0 if whole file)
	IsLastChunk   bool                   `protobuf:"varint,4,opt,name=is_last_chunk,json=isLastChunk,proto3" json:"is_last_chunk,omitempty"` // true if this completes the file
	Sequence      int32                  `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`                            // Sequence in multi-instance response
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataChunk) Reset() {
	*x = DataChunk{}
	mi := &file_tunnel_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChunk) ProtoMessage() {}

func (x *DataChunk) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChunk.ProtoReflect.Descriptor instead.
func (*DataChunk) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{7}
}

func (x *DataChunk) GetInstanceUid() string {
	if x != nil {
		return x.InstanceUid
	}
	return ""
}

func (x *DataChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DataChunk) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *DataChunk) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

func (x *DataChunk) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// DataComplete - all instances sent successfully
type DataComplete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceCount int32                  `protobuf:"varint,1,opt,name=instance_count,json=instanceCount,proto3" json:"instance_count,omitempty"` // Number of instances sent
	TotalBytes    int64                  `protobuf:"varint,2,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`          // Total bytes transferred
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataComplete) Reset() {
	*x = DataComplete{}
	mi := &file_tunnel_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataComplete) ProtoMessage() {}

func (x *DataComplete) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataComplete.ProtoReflect.Descriptor instead.
func (*DataComplete) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{8}
}

func (x *DataComplete) GetInstanceCount() int32 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

func (x *DataComplete) GetTotalBytes() int64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

// DataError - error occurred during fetch
type DataError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorCode     string                 `protobuf:"bytes,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` // "NOT_FOUND", "IO_ERROR", "TIMEOUT"
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	InstanceUid   string                 `protobuf:"bytes,3,opt,name=instance_uid,json=instanceUid,proto3" json:"instance_uid,omitempty"` // Instance that caused error (if applicable)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataError) Reset() {
	*x = DataError{}
	mi := &file_tunnel_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataError) ProtoMessage() {}

func (x *DataError) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataError.ProtoReflect.Descriptor instead.
func (*DataError) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{9}
}

func (x *DataError) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *DataError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *DataError) GetInstanceUid() string {
	if x != nil {
		return x.InstanceUid
	}
	return ""
}

// KeepAlive - bidirectional heartbeat
type KeepAlive struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Unix timestamp
	Sequence      int64                  `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`   // Monotonic sequence number
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeepAlive) Reset() {
	*x = KeepAlive{}
	mi := &file_tunnel_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeepAlive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAlive) ProtoMessage() {}

func (x *KeepAlive) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAlive.ProtoReflect.Descriptor instead.
func (*KeepAlive) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{10}
}

func (x *KeepAlive) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *KeepAlive) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// StatusUpdate - edge reports health/stats (optional)
type StatusUpdate struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Timestamp          int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	InstancesAvailable int64                  `protobuf:"varint,2,opt,name=instances_available,json=instancesAvailable,proto3" json:"instances_available,omitempty"`
	DiskUsageBytes     int64                  `protobuf:"varint,3,opt,name=disk_usage_bytes,json=diskUsageBytes,proto3" json:"disk_usage_bytes,omitempty"`
	Healthy            bool                   `protobuf:"varint,4,opt,name=healthy,proto3" json:"healthy,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *StatusUpdate) Reset() {
	*x = StatusUpdate{}
	mi := &file_tunnel_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdate) ProtoMessage() {}

func (x *StatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdate.ProtoReflect.Descriptor instead.
func (*StatusUpdate) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{11}
}

func (x *StatusUpdate) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StatusUpdate) GetInstancesAvailable() int64 {
	if x != nil {
		return x.InstancesAvailable
	}
	return 0
}

func (x *StatusUpdate) GetDiskUsageBytes() int64 {
	if x != nil {
		return x.DiskUsageBytes
	}
	return 0
}

func (x *StatusUpdate) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

var File_tunnel_proto protoreflect.FileDescriptor

const file_tunnel_proto_rawDesc = "" +
	"\n" +
	"\ftunnel.proto\x12\x06tunnel\"\xde\x01\n" +
	"\vEdgeMessage\x125\n" +
	"\bregister\x18\x01 \x01(\v2\x17.tunnel.RegisterRequestH\x00R\bregister\x12*\n" +
	"\x04data\x18\x02 \x01(\v2\x14.tunnel.DataResponseH\x00R\x04data\x121\n" +
	"\tkeepalive\x18\x03 \x01(\v2\x11.tunnel.KeepAliveH\x00R\tkeepalive\x12.\n" +
	"\x06status\x18\x04 \x01(\v2\x14.tunnel.StatusUpdateH\x00R\x06statusB\t\n" +
	"\amessage\"\xbd\x01\n" +
	"\fRelayMessage\x12=\n" +
	"\fregister_ack\x18\x01 \x01(\v2\x18.tunnel.RegisterResponseH\x00R\vregisterAck\x120\n" +
	"\acommand\x18\x02 \x01(\v2\x14.tunnel.FetchCommandH\x00R\acommand\x121\n" +
	"\tkeepalive\x18\x03 \x01(\v2\x11.tunnel.KeepAliveH\x00R\tkeepaliveB\t\n" +
	"\amessage\"\x88\x01\n" +
	"\x0fRegisterRequest\x12\x1f\n" +
	"\vhospital_id\x18\x01 \x01(\tR\n" +
	"hospitalId\x12$\n" +
	"\x0eedge_server_id\x18\x02 \x01(\tR\fedgeServerId\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x12\x14\n" +
	"\x05token\x18\x04 \x01(\tR\x05token\"g\n" +
	"\x10RegisterResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1f\n" +
	"\vserver_time\x18\x03 \x01(\x03R\n" +
	"serverTime\"\xc1\x01\n" +
	"\fFetchCommand\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12!\n" +
	"\finstance_uid\x18\x03 \x01(\tR\vinstanceUid\x12\x1d\n" +
	"\n" +
	"series_uid\x18\x04 \x01(\tR\tseriesUid\x12\x1b\n" +
	"\tstudy_uid\x18\x05 \x01(\tR\bstudyUid\x12\x1f\n" +
	"\vresume_from\x18\x06 \x01(\tR\n" +
	"resumeFrom\"\xed\x01\n" +
	"\fDataResponse\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12)\n" +
	"\x05start\x18\x02 \x01(\v2\x11.tunnel.DataStartH\x00R\x05start\x12)\n" +
	"\x05chunk\x18\x03 \x01(\v2\x11.tunnel.DataChunkH\x00R\x05chunk\x122\n" +
	"\bcomplete\x18\x04 \x01(\v2\x14.tunnel.DataCompleteH\x00R\bcomplete\x12)\n" +
	"\x05error\x18\x05 \x01(\v2\x11.tunnel.DataErrorH\x00R\x05errorB\t\n" +
	"\apayload\"\xa2\x01\n" +
	"\tDataStart\x12!\n" +
	"\finstance_uid\x18\x01 \x01(\tR\vinstanceUid\x12\x1b\n" +
	"\tfile_size\x18\x02 \x01(\x03R\bfileSize\x12\x18\n" +
	"\achunked\x18\x03 \x01(\bR\achunked\x12\x1f\n" +
	"\vchunk_count\x18\x04 \x01(\x05R\n" +
	"chunkCount\x12\x1a\n" +
	"\bsequence\x18\x05 \x01(\x05R\bsequence\"\xa3\x01\n" +
	"\tDataChunk\x12!\n" +
	"\finstance_uid\x18\x01 \x01(\tR\vinstanceUid\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12\x1f\n" +
	"\vchunk_index\x18\x03 \x01(\x05R\n" +
	"chunkIndex\x12\"\n" +
	"\ris_last_chunk\x18\x04 \x01(\bR\visLastChunk\x12\x1a\n" +
	"\bsequence\x18\x05 \x01(\x05R\bsequence\"V\n" +
	"\fDataComplete\x12%\n" +
	"\x0einstance_count\x18\x01 \x01(\x05R\rinstanceCount\x12\x1f\n" +
	"\vtotal_bytes\x18\x02 \x01(\x03R\n" +
	"totalBytes\"r\n" +
	"\tDataError\x12\x1d\n" +
	"\n" +
	"error_code\x18\x01 \x01(\tR\terrorCode\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12!\n" +
	"\finstance_uid\x18\x03 \x01(\tR\vinstanceUid\"E\n" +
	"\tKeepAlive\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\x12\x1a\n" +
	"\bsequence\x18\x02 \x01(\x03R\bsequence\"\xa1\x01\n" +
	"\fStatusUpdate\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\x12/\n" +
	"\x13instances_available\x18\x02 \x01(\x03R\x12instancesAvailable\x12(\n" +
	"\x10disk_usage_bytes\x18\x03 \x01(\x03R\x0ediskUsageBytes\x12\x18\n" +
	"\ahealthy\x18\x04 \x01(\bR\ahealthy2H\n" +
	"\rTunnelService\x127\n" +
	"\x06Stream\x12\x13.tunnel.EdgeMessage\x1a\x14.tunnel.RelayMessage(\x010\x01BAZ?github.com/minasoft-technology/gordionedge/internal/tunnel/grpcb\x06proto3"

var (
	file_tunnel_proto_rawDescOnce sync.Once
	file_tunnel_proto_rawDescData []byte
)

func file_tunnel_proto_rawDescGZIP() []byte {
	file_tunnel_proto_rawDescOnce.Do(func() {
		file_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tunnel_proto_rawDesc), len(file_tunnel_proto_rawDesc)))
	})
	return file_tunnel_proto_rawDescData
}

var file_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_tunnel_proto_goTypes = []any{
	(*EdgeMessage)(nil),      // 0: tunnel.EdgeMessage
	(*RelayMessage)(nil),     // 1: tunnel.RelayMessage
	(*RegisterRequest)(nil),  // 2: tunnel.RegisterRequest
	(*RegisterResponse)(nil), // 3: tunnel.RegisterResponse
	(*FetchCommand)(nil),     // 4: tunnel.FetchCommand
	(*DataResponse)(nil),     // 5: tunnel.DataResponse
	(*DataStart)(nil),        // 6: tunnel.DataStart
	(*DataChunk)(nil),        // 7: tunnel.DataChunk
	(*DataComplete)(nil),     // 8: tunnel.DataComplete
	(*DataError)(nil),        // 9: tunnel.DataError
	(*KeepAlive)(nil),        // 10: tunnel.KeepAlive
	(*StatusUpdate)(nil),     // 11: tunnel.StatusUpdate
}
var file_tunnel_proto_depIdxs = []int32{
	2,  // 0: tunnel.EdgeMessage.register:type_name -> tunnel.RegisterRequest
	5,  // 1: tunnel.EdgeMessage.data:type_name -> tunnel.DataResponse
	10, // 2: tunnel.EdgeMessage.keepalive:type_name -> tunnel.KeepAlive
	11, // 3: tunnel.EdgeMessage.status:type_name -> tunnel.StatusUpdate
	3,  // 4: tunnel.RelayMessage.register_ack:type_name -> tunnel.RegisterResponse
	4,  // 5: tunnel.RelayMessage.command:type_name -> tunnel.FetchCommand
	10, // 6: tunnel.RelayMessage.keepalive:type_name -> tunnel.KeepAlive
	6,  // 7: tunnel.DataResponse.start:type_name -> tunnel.DataStart
	7,  // 8: tunnel.DataResponse.chunk:type_name -> tunnel.DataChunk
	8,  // 9: tunnel.DataResponse.complete:type_name -> tunnel.DataComplete
	9,  // 10: tunnel.DataResponse.error:type_name -> tunnel.DataError
	0,  // 11: tunnel.TunnelService.Stream:input_type -> tunnel.EdgeMessage
	1,  // 12: tunnel.TunnelService.Stream:output_type -> tunnel.RelayMessage
	12, // [12:13] is the sub-list for method output_type
	11, // [11:12] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_tunnel_proto_init() }
func file_tunnel_proto_init() {
	if File_tunnel_proto != nil {
		return
	}
	file_tunnel_proto_msgTypes[0].OneofWrappers = []any{
		(*EdgeMessage_Register)(nil),
		(*EdgeMessage_Data)(nil),
		(*EdgeMessage_Keepalive)(nil),
		(*EdgeMessage_Status)(nil),
	}
	file_tunnel_proto_msgTypes[1].OneofWrappers = []any{
		(*RelayMessage_RegisterAck)(nil),
		(*RelayMessage_Command)(nil),
		(*RelayMessage_Keepalive)(nil),
	}
	file_tunnel_proto_msgTypes[5].OneofWrappers = []any{
		(*DataResponse_Start)(nil),
		(*DataResponse_Chunk)(nil),
		(*DataResponse_Complete)(nil),
		(*DataResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tunnel_proto_rawDesc), len(file_tunnel_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tunnel_proto_goTypes,
		DependencyIndexes: file_tunnel_proto_depIdxs,
		MessageInfos:      file_tunnel_proto_msgTypes,
	}.Build()
	File_tunnel_proto = out.File
	file_tunnel_proto_goTypes = nil
	file_tunnel_proto_depIdxs = nil
}
